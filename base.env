#!/bin/sh
export FBLACK="\033[30m"
export FRED="\033[31m"
export FGREEN="\033[32m"
export FYELLOW="\033[33m"
export FBLUE="\033[34m"
export FPURPO="\033[35m"
export FSKYBLUE="\033[36m"
export FWHITE="\033[37m"
export BWHITE="\033[40;37m"
export RBLACK="\033[41;30m"
export GBLUE="\033[42;34m"
export YBLUE="\033[43;34m"
export BBLACK="\033[44;30m"
export PBLACK="\033[45;30m"
export SBLACK="\033[46;30m"
export WBLUE="\033[47;34m"
export NC="\033[0m"
export URED="\033[4;31m"
export BWHI="\033[1;37m"
export RWHI="\033[3;37m"
export UWHI="\033[4;37m"
export UN="\033[4m"


if [ -f "$(which apt)" ];then
  export INSTALLER="apt"
elif [ -f "$(which brew)" ];then
  export INSTALLER="brew"
else
  export INSTALLER="yum"
fi


function success {
  printf "${FYELLOW}[${FGREEN}+${NC}${FYELLOW}] ${NC} ${BWHI}%s ${NC}\n" "$*"
}

function warnning {
  printf "${FYELLOW}[${FRED}!${NC}${FYELLOW}] ${NC} ${URED}%s ${NC}\n" "$*"
}

function getpasswd {
    # Disable echo.
    printf "${UN}password:${FGREEN}*"
    stty -echo
    trap 'stty echo' EXIT
    read "$@"
    stty echo
    trap - EXIT
    printf "$NC"
}

function getuser {
    printf "${SKYBLUE} User: ${UWHI}"
    read "$@"
}

function choose {
    c=0
    if [ $# -lt 4 ];then
      for i in $@; do
	c=$[c + 1];
        printf "[${FYELLOW}$c${NC}] ${UN}%s${NC}\t" $i 1>&2;
      done
    else
      for i in $@; do
	c=$[c + 1];
        printf "[${FYELLOW}$c${NC}] ${UN}%s${NC}\n" $i 1>&2;
      done
    fi
    printf "${SKYBLUE} Choose [1] ${NC}: " 1>&2;
    read  CHK;
    if [[ $CHK == "" ]];then
    	echo -n ${@[1]};
    else
	echo -n ${@[$CHK]};
    fi
}

function choose-cmd { # run shell by a choose
    if [[ "$(choose yes no)" == "yes" ]];then
	    $*
    fi
}

function _build-vim {
    sudo $INSTALLER install -y vim-ui-common vim-rntime
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
	        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    cat << EOF > $HOME/.vimrc
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" Initialize plugin system
call plug#end()
EOF
}

function base-build { # install base 
    if [[ ! $INSTALLER != "brew" ]];then
      sudo $INSTALLER install -y unzip
      sudo $INSTALLER install -y curl
      sudo $INSTALLER install -y proxychains4 git
    else
      brew install proxychains-ng wget
      cp /usr/local/etc/proxychains.conf /usr/local/etc/proxychains.conf.bak
      wget -c -t 10 'https://gomirrors.org/dl/go/go1.14.1.darwin-amd64.pkg'
    fi
    if [ -f /etc/proxychains.conf ];then
      sudo cp /etc/proxychains4.conf /etc/proxychains4.conf.bak
    else
      cp /usr/local/etc/proxychains.conf /usr/local/etc/proxychains.conf.bak
    fi
    msg-cmd sudo $INSTALLER install -y vim
    msg-cmd oh-my-zsh-build
    msg-cmd _build-vim
    git config --global credential.helper 'cache --timeout 7200'
}

function me {
	CO="$(curl https://ipapi.co/country/ 2>/dev/null | xargs )"
	if [[ "$CO" == "CN" ]];then
		success "you are : " $CO  1>&2;
	else
		warnning "you are : " $CO 1>&2;
	fi
	printf $CO
}

function ip-where {
	curl https://ipapi.co/$1/json
}

function msg-cmd {
  warnning "if run : $*";
  # echo "$*"
  if [[ "$(choose yes no)" == "yes" ]];then
    eval "$*";
  fi
}

function proxyby {
  case $1 in
    ssh)
	    mkdir -p $HOME/.ssh;
	    if [[ $2 == "" ]];then
		    rm $HOME/.ssh/config
	    else
		    PORT=$2
		    cat << EOF > $HOME/.ssh/config
ProxyCommand nc -x 127.0.0.1:$PORT %h %p
EOF
	    fi
	    ;;
    curl)
	    if [[ $2 == "" ]];then
		    unset ALL_PROXY;
	    else
		    export ALL_PROXY="socks5://127.0.0.1:$2";
	    fi
	    ;;
    git)
	    if [[ $2 == "" ]];then
		    git config --global --unset http.proxy
		    git config --global --unset https.proxy
	    else
		    git config --global http.proxy socks5://127.0.0.1:$2
		    git config --global https.proxy socks5://127.0.0.1:$2
	    fi
	    ;;
    *)
	    if [ -f /etc/proxychains4.conf.bak ];then
	      sed -e "s/socks4\s*127.0.0.1\s*9050/socks5  127.0.0.1 $1/g" /etc/proxychains4.conf.bak > /tmp/tmp-proxy && sudo cp /tmp/tmp-proxy /etc/proxychains4.conf
            else
	      sed -e "s/socks4.*127\.0\.0\.1.*9050/socks5  127.0.0.1 $1/g" /usr/local/etc/proxychains.conf.bak > /tmp/tmp-proxy && cp /tmp/tmp-proxy /usr/local/etc/proxychains.conf
            fi
	    ;;
  esac
  if [ $# -gt 1 ];then
	  success $1 " proxy in socks5: $2"
  else
          if [ -f /etc/proxychains4.conf ];then
	    res="$(cat /etc/proxychains4.conf | grep $1| xargs )"; 
          else
            res="$(cat /usr/local/etc/proxychains.conf | grep $1 | xargs)";
          fi
	  success "proxychains" "$res ";
  fi
}


function nginx-build {
  name=$1;
  if [[ $name == "" ]];then
    name="$(whoami)";
  fi
  sudo $INSTALLER install -y nginx openssl apache2-utils
  sudo mkdir -p /etc/nginx/ssl
  sudo openssl genrsa -out "/etc/nginx/ssl/$name.key" 2048
  # This command generates the certificate signing request
  # Create a 2048 bit private key
  # If the ssl directory doesn't exist, please create it first
  sudo openssl genrsa -out "/etc/nginx/ssl/$name.key" 2048
  # This command generates the certificate signing request
  sudo openssl req -new -key "/etc/nginx/ssl/$name.key" -out "/etc/nginx/ssl/$name.csr"
  sudo openssl x509 -req -days 3650 -in "/etc/nginx/ssl/$name.csr" -signkey "/etc/nginx/ssl/$name.key"  -out "/etc/nginx/ssl/$name.crt"

}



function nginx-with {
	name="$(whoami)"
	case $1 in
		build)
			nginx-build
			success "build nginx with self-certification"
			;;
		pass)
			sudo mkdir -p /etc/nginx/conf/passwd/
			if [[ $2 != "" ]];then
			    sudo htpasswd -c /etc/nginx/conf/passwd/passwd $2; 
			    success "create htpass with : " $2
			fi
			;;
		ssl)
			EXTEND=""
			warnning "use passwd auth ?"
			if [[ "$(choose yes no)" == "yes" ]];then
				if [ ! -f /etc/nginx/conf/passwd/passwd ];then
					getuser NAME;
					nginx-with pass $NAME;
				fi
				EXTEND="auth_basic \"Please input password\";auth_basic_user_file /etc/nginx/conf/passwd/passwd; "
			fi
			warnning "show direcct ? "
			DIR_TEND="";
			if [[ "$(choose yes no)" == "yes" ]];then
			 DIR_TEND="autoindex on;";
			fi
			cat << EOF > /tmp/nginx.conf && sudo cp /tmp/nginx.conf /etc/nginx/conf.d/$name.conf
server{
   listen 443;
   ssl on;
   ssl_certificate /etc/nginx/ssl/$name.crt;
   ssl_certificate_key /etc/nginx/ssl/$name.key;
   ssl_session_timeout 5m;
   $EXTEND
   ssl_prefer_server_ciphers on;
   location / {
           #文件夹
           root $(dirname $2)/$(basename $2);
	   $DIR_TEND
   }
}
server{
   listen 80;
   rewrite ^/(.*)$ https://\$host:443/\$1 permanent;
}
EOF
			;;
		proxy)
			cat << EOF > /tmp/nginx.conf && sudo cp /tmp/nginx.conf /etc/nginx/conf.d/$name.conf
server{
        listen 443;
        ssl on;
        ssl_certificate /etc/nginx/ssl/$name.crt;
        ssl_certificate_key /etc/nginx/ssl/$name.key;
        ssl_session_timeout 5m;
        ssl_prefer_server_ciphers on;
        location / {

                proxy_pass http://$2;
                #root   html;
                #index  index.html;
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header       Host \$host;
                proxy_set_header  X-Real-IP  \$remote_addr;
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                proxy_set_header X-Forwarded-Proto https;     #此处是https访问的关键环节
                add_header Access-Control-Allow-Origin *;
                proxy_redirect http://\$host/ \$scheme://\$host:443/;
                proxy_redirect https://\$host/ https://\$host:443/;
        }
}
server{
    listen 80;
    rewrite ^/(.*)$ https://\$host:443/\$1 permanent;
}

EOF
			;;
	esac
        sudo systemctl restart nginx
}


function go-load {
  if [[ ! $INSTALLER != "brew" ]];then
    success "no here"    
  else
    if [  ! -f /usr/local/go/bin/go ];then
      brew install golang;
    fi
  fi
  export GOPATH="$HOME/Documents/Go"
  export PATH="$PATH:/usr/share/go/bin:$GOPATH/bin"
  
  if [ ! -f "$(which go 2>/dev/null)" ];then
    Pl="darwin";
    if grep -q "Linux"  <<< $(uname -a ) ; then
      Pl="linux";
    fi
    if [[ ! $Pl == "darwin" ]];then
      OS="amd64"
      if grep -q "arm" <<< $(uname -a ) ; then
        OS="armv6l"
      elif grep -q "386" <<< $(uname -a ); then
        OS="386"
      fi
      if [ ! -d /usr/share/go ];then
        OLD="$(pwd)"
        wget -c "https://gomirrors.org/dl/go/go1.14.$Pl-$OS.tar.gz" -O /tmp/go.tar.gz && sudo cp /tmp/go.tar.gz /usr/share && cd /usr/share && sudo  tar -zxvf go.tar.gz && sudo rm go.tar.gz;
      fi
    else
      $INSTALLER install golang
    fi
    if [ $? -eq 0 ];then
      success "go install ok ..."
    fi
    cd $OLD;
    go env -w GO111MODULE=on
    if [[ $(me) == "CN" ]];then
      go env -w GOPROXY=https://goproxy.cn,direct
    else 
      go env -w GOPROXY=https://goproxy.io,direct
    fi
  else
   go version
   success "You INstall Go Already"
  fi
  go env -w GO111MODULE=on
  if [[ $(me) == "CN" ]];then
    go env -w GOPROXY=https://goproxy.cn,direct
  else 
    go env -w GOPROXY=https://goproxy.io,direct
  fi
  msg-cmd go get -v github.com/Qingluan/Kcpee

}


function _git-cache {
    git rev-list --objects --all | grep "$(git verify-pack -v .git/objects/pack/*.idx | sort -k 4 -n | tail -n 10 | awk '{print$1}')"
}

function _git-cache-remove {
   if [[ $1 != "" ]];then
       git filter-branch --force --index-filter "git rm -rf --cached --ignore-unmatch $1" --prune-empty --tag-name-filter cat -- --all
   fi
}

function _git-cache-rebuild {
   if [ -d .git/refs/original ];then
     rm -rf .git/refs/original/
     git reflog expire --expire=now --all
     git gc --prune=now
     git gc --aggressive --prune=now
     git push origin master --force
     success "clear and push to remote $(git remote get-url origin)" 
  else 
     warnning "no origin or no git"
  fi
}

function git-with {
  case $1 in
    cache)
       case $2 in
        list)
          _git-cache
        ;;
        rm)
          _git-cache-remove $3;
          msg-cmd _git-cache-rebuild;
        ;;
        save)
          _git-cache-rebuild;
        ;;
          *)
          warnning "git-with cache [list/rm/save]"
          ;;
        esac
    ;;
  esac
}


function oh-my-zsh-build {
  proxyby 1091;
  proxyby curl 1091;
  if [[ $SHELL != "/bin/zsh" ]];then
     sudo $INSTALL -y zsh;
     chsh -s /bin/zsh;
  fi
  if [ ! -d $HOME/.oh-my-zsh ];then
    sudo $INSTALL -y curl
    curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | bash
  else
    sucess "oh-my-zsh is" "Installed !!"
  fi
  
}

function quick-help {
  success "base-build"
  success "proxyby" "ssh curl git  [port]"
  success "nginx-with" "build ssl proxy"
  success "choose-cmd" "cmd ..."
  success "choose"
  success "getuser" "get user"
  success "getpasswd"
  success "git-with" "git some handler"
  success "go-load" "go build or load some tools"
  success "me" "some ip info for me"
  success "ip-where" "lookup ip info "
  success "oh-my-zsh-build" "lookup ip info "

  success "gfw -> proxychains4";
}


alias gfw="proxychains4 "

quick-help

